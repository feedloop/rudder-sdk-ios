/**
 * This client was automatically generated by RudderStack Typewriter. ** Do Not Edit **
 */

import Rudder

class TypewriterAnalytics {
    static func signInFailed(dimensions: Dimensions?, id: String, numAttempts: Int?, rememberMe: Bool?) {
        TypewriterAnalytics.signInFailed(dimensions: dimensions, id: id, numAttempts: numAttempts, rememberMe: rememberMe, options: RSOption())
    }

    /// Fired after a user's signin attempt fails to pass validation.
    static func signInFailed(dimensions: Dimensions?, id: String, numAttempts: Int?, rememberMe: Bool?, options: RSOption?) {
        var properties = [String: Any]()
        properties["dimensions"] = dimensions?.serializableDictionary();
        properties["id"] = id;
        properties["numAttempts"] = numAttempts;
        properties["rememberMe"] = rememberMe;

        RSClient.sharedInstance()?.track("Sign In Failed", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func signInSubmitted(id: String, numAttempts: Int?, rememberMe: Bool?) {
        TypewriterAnalytics.signInSubmitted(id: id, numAttempts: numAttempts, rememberMe: rememberMe, options: RSOption())
    }

    /// Fired when a user submits a sign in, prior to validating that user's login.
    static func signInSubmitted(id: String, numAttempts: Int?, rememberMe: Bool?, options: RSOption?) {
        var properties = [String: Any]()
        properties["id"] = id;
        properties["numAttempts"] = numAttempts;
        properties["rememberMe"] = rememberMe;

        RSClient.sharedInstance()?.track("Sign In Submitted", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func signInSucceeded(id: String, numAttempts: Int?, rememberMe: Bool?) {
        TypewriterAnalytics.signInSucceeded(id: id, numAttempts: numAttempts, rememberMe: rememberMe, options: RSOption())
    }

    /// Fired when a user successfully submits a sign in, prior to redirecting into the app.
    static func signInSucceeded(id: String, numAttempts: Int?, rememberMe: Bool?, options: RSOption?) {
        var properties = [String: Any]()
        properties["id"] = id;
        properties["numAttempts"] = numAttempts;
        properties["rememberMe"] = rememberMe;

        RSClient.sharedInstance()?.track("Sign In Succeeded", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func userSignedOut(id: String, numAttempts: Int?, rememberMe: Bool?) {
        TypewriterAnalytics.userSignedOut(id: id, numAttempts: numAttempts, rememberMe: rememberMe, options: RSOption())
    }

    /// Fired when a user successfully submits a sign in, prior to redirecting into the app.
    static func userSignedOut(id: String, numAttempts: Int?, rememberMe: Bool?, options: RSOption?) {
        var properties = [String: Any]()
        properties["id"] = id;
        properties["numAttempts"] = numAttempts;
        properties["rememberMe"] = rememberMe;

        RSClient.sharedInstance()?.track("User Signed Out", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

}
